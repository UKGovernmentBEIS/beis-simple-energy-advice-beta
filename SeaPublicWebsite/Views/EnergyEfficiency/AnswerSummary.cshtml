@using GovUkDesignSystem
@using GovUkDesignSystem.Attributes
@using GovUkDesignSystem.GovUkDesignSystemComponents
@using SeaPublicWebsite.Controllers
@using SeaPublicWebsite.Helpers
@using SeaPublicWebsite.Models.EnergyEfficiency.QuestionOptions
@using SeaPublicWebsite.Services
@model SeaPublicWebsite.Models.EnergyEfficiency.AnswerSummaryViewModel
@{
    ViewBag.Title = "Your answers";
}

@section BeforeMain {
    @await Html.GovUkBackLink(new BackLinkViewModel
    {
        Text = "Back",
        Href = Model.BackLink,

        // Note: some of the "Back" links in this journey can't use the default browser behaviour
        //  so we should control all of them explicitly
        OverrideWithJavascript = false
    })
}

@{
    var rows = new List<SummaryListRowViewModel>();
    
    rows.Add(new()
    {
        Key = new() 
        {
            Classes = "govuk-!-width-one-quarter",
            Text = "Building type"
        },
        Value = new()
        {
            Classes = "govuk-!-width-one-half",
            Html = (@<text>
                        @(Model.UserDataModel.PropertyType == PropertyType.House ? GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.HouseType) : null)
                        @(Model.UserDataModel.PropertyType == PropertyType.Bungalow ? GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.BungalowType) : null)
                        @(Model.UserDataModel.PropertyType == PropertyType.ApartmentFlatOrMaisonette ? GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.FlatType) : null)
                        @(GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.PropertyType))
                     </text>)
        },
        Actions = new()
        {
            Classes = "govuk-!-width-one-quarter",
            Items = new()
            {
                new()
                {
                    Href = Url.Action(nameof(EnergyEfficiencyController.PropertyType_Get), "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = QuestionFlowPage.PropertyType}),
                    Text = "Change",
                    VisuallyHiddenText = "address"
                }
            }
        }
    });
    
    rows.Add(new()
    {
        Key = new() 
        {
            Classes = "govuk-!-width-one-quarter",
            Text = "Year home was built"
        },
        Value = new()
        {
            Classes = "govuk-!-width-one-half",
            Text = Model.UserDataModel.YearBuilt?.ToString() ?? "I'm not sure"
        },
        Actions = new()
        {
            Classes = "govuk-!-width-one-quarter",
            Items = new()
            {
                new()
                {
                    Href = @Url.Action(nameof(EnergyEfficiencyController.HomeAge_Get), "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = QuestionFlowPage.HomeAge}),
                    Text = "Change",
                    VisuallyHiddenText = "home type"
                }
            }
        }
    });
    
    rows.Add(new()
    {
        Key = new() 
        {
            Classes = "govuk-!-width-one-quarter",
            Text = "Wall type"
        },
        Value = new()
        {
            Classes = "govuk-!-width-one-half",
            Html = (@<text>
                        @(GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.WallConstruction))
                        @if (Model.UserDataModel.WallConstruction == WallConstruction.DoNotKnow)
                        {
                            if (Model.UserDataModel.Epc?.WallConstruction is not null || Model.UserDataModel.YearBuilt.HasValue &&  Model.UserDataModel.Epc?.ConstructionAgeBand is not null)
                            {
                                if (UserDataHelper.HasCavityWalls(Model.UserDataModel))
                                {
                                    <p class="govuk-body-s sea-assumed-answer govuk-!-padding-top-2">
                                        Based on your Energy Performance Certificate, we will assume that you have @(UserDataHelper.HasInsulatedCavityWalls(Model.UserDataModel) ? "insulated" : "uninsulated") cavity walls
                                    </p>
                                }
                                else if (UserDataHelper.HasSolidWalls(Model.UserDataModel))
                                {
                                    <p class="govuk-body-s sea-assumed-answer govuk-!-padding-top-2">
                                        Based on your Energy Performance Certificate, we will assume that you have @(UserDataHelper.HasInsulatedSolidWalls(Model.UserDataModel) ? "insulated" : "uninsulated") solid walls
                                    </p>
                                }
                            }
                            else if (Model.UserDataModel.YearBuilt.HasValue)
                            {
                                if (UserDataHelper.HasCavityWalls(Model.UserDataModel))
                                {
                                    <p class="govuk-body-s sea-assumed-answer govuk-!-padding-top-2">
                                        Based on your type of property, we will assume that you have @(UserDataHelper.HasInsulatedCavityWalls(Model.UserDataModel) ? "insulated" : "uninsulated") cavity walls
                                    </p>
                                }
                                else if (UserDataHelper.HasSolidWalls(Model.UserDataModel))
                                {
                                    <p class="govuk-body-s sea-assumed-answer govuk-!-padding-top-2">
                                        Based on your type of property, we will assume that you have @(UserDataHelper.HasInsulatedSolidWalls(Model.UserDataModel) ? "insulated" : "uninsulated") solid walls
                                    </p>                                
                                }
                            }
                        }
                     </text>)
        },
        Actions = new()
        {
            Classes = "govuk-!-width-one-quarter",
            Items = new()
            {
                new()
                {
                    Href = @Url.Action(nameof(EnergyEfficiencyController.WallConstruction_Get), "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = QuestionFlowPage.WallConstruction}),
                    Text = "Change",
                    VisuallyHiddenText = "home type"
                }
            }
        }
    });

    if (Model.UserDataModel.WallConstruction is WallConstruction.Cavity or WallConstruction.Mixed)
    {
        rows.Add(new()
        {
            Key = new()
            {
                Classes = "govuk-!-width-one-quarter",
                Text = "Are your cavity walls insulated?"
            },
            Value = new()
            {
                Classes = "govuk-!-width-one-half",
                Html = (@<text>
                            @(GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.CavityWallsInsulated))
                            @if (Model.UserDataModel.CavityWallsInsulated is CavityWallsInsulated.DoNotKnow)
                            {
                                if (Model.UserDataModel.Epc is not null && (Model.UserDataModel.Epc.CavityWallsInsulated is not null || Model.UserDataModel.Epc.ConstructionAgeBand is not null))
                                {
                                    <p class="govuk-body-s sea-assumed-answers">
                                        Based on your Energy Performance Certificate, we will assume that you have @(UserDataHelper.HasInsulatedCavityWalls(Model.UserDataModel) ? "insulated" : "uninsulated") cavity walls
                                    </p>
                                }
                                else if (Model.UserDataModel.YearBuilt.HasValue)
                                {
                                    <p class="govuk-body-s sea-assumed-answer govuk-!-padding-top-2">
                                        Based on your type of property, we will assume that you have @(UserDataHelper.HasInsulatedCavityWalls(Model.UserDataModel) ? "insulated" : "uninsulated") cavity walls
                                    </p>
                                }
                            }
                         </text>)
            },
            Actions = new()
            {
                Classes = "govuk-!-width-one-quarter",
                Items = new()
                {
                    new()
                    {
                        Href = Url.Action(nameof(EnergyEfficiencyController.CavityWallsInsulated_Get), "EnergyEfficiency", new { reference = Model.UserDataModel.Reference, entryPoint = QuestionFlowPage.CavityWallsInsulated }),
                        Text = "Change",
                        VisuallyHiddenText = "are cavity walls insulated"
                    }
                }
            }
        });
    }
    
    if (Model.UserDataModel.WallConstruction is WallConstruction.Solid or WallConstruction.Mixed)
    {
        rows.Add(new()
        {
            Key = new() 
            {
                Classes = "govuk-!-width-one-quarter",
                Text = "Are your solid walls insulated?"
            },
            Value = new()
            {
                Classes = "govuk-!-width-one-half",
                Html = (@<text>
                            @(GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.SolidWallsInsulated))
                            @if (Model.UserDataModel.SolidWallsInsulated is SolidWallsInsulated.DoNotKnow)
                            {
                                if (Model.UserDataModel.Epc is not null && (Model.UserDataModel.Epc.SolidWallsInsulated != null || Model.UserDataModel.Epc.ConstructionAgeBand != null))
                                {
                                    <p class="govuk-body-s sea-assumed-answer govuk-!-padding-top-2">
                                        Based on your Energy Performance Certificate, we will assume that you have @(UserDataHelper.HasInsulatedSolidWalls(Model.UserDataModel) ? "insulated" : "uninsulated") solid walls
                                    </p>
                                }
                                else if (Model.UserDataModel.YearBuilt.HasValue)
                                {
                                    <p class="govuk-body-s sea-assumed-answer govuk-!-padding-top-1">
                                        Based on your type of property, we will assume that you have @(UserDataHelper.HasInsulatedSolidWalls(Model.UserDataModel) ? "insulated" : "uninsulated") solid walls
                                    </p>
                                }
                            }
                         </text>)
            },
            Actions = new()
            {
                Classes = "govuk-!-width-one-quarter",
                Items = new()
                {
                    new()
                    {
                        Href = Url.Action(nameof(EnergyEfficiencyController.SolidWallsInsulated_Get), "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = QuestionFlowPage.SolidWallsInsulated}),
                        Text = "Change",
                        VisuallyHiddenText = "are solid walls insulated"
                    }
                }
            }
        });
    }

    if (Model.UserDataModel.PropertyType is not PropertyType.ApartmentFlatOrMaisonette || Model.UserDataModel.FlatType is FlatType.GroundFloor)
    {
        rows.Add(new()
        {
            Key = new() 
            {
                Classes = "govuk-!-width-one-quarter",
                Text = "Floor construction"
            },
            Value = new()
            {
                Classes = "govuk-!-width-one-half",
                Html = (@<text>
                            @(GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.FloorConstruction))
                            @if (Model.UserDataModel.FloorConstruction is FloorConstruction.DoNotKnow)
                            {
                                if (Model.UserDataModel.Epc?.FloorConstruction is not null || !Model.UserDataModel.YearBuilt.HasValue && Model.UserDataModel.Epc?.ConstructionAgeBand is not null)
                                {
                                    if (UserDataHelper.HasSolidFloor(Model.UserDataModel))
                                    {
                                        <p class="govuk-body-s sea-assumed-answer govuk-!-padding-top-2">
                                            Based on your Energy Performance Certificate, we will assume that you have an @(UserDataHelper.HasInsulatedFloor(Model.UserDataModel) ? "insulated" : "uninsulated") solid concrete floor
                                        </p>
                                    }
                                    else if (UserDataHelper.HasSuspendedFloor(Model.UserDataModel))
                                    {
                                        <p class="govuk-body-s sea-assumed-answer govuk-!-padding-top-2">
                                            Based on your Energy Performance Certificate, we will assume that you have an @(UserDataHelper.HasInsulatedFloor(Model.UserDataModel) ? "insulated" : "uninsulated") suspended timber floor
                                        </p>
                                    }
                                }
                                else if (Model.UserDataModel.YearBuilt.HasValue)
                                {
                                    if (UserDataHelper.HasSolidFloor(Model.UserDataModel))
                                    {
                                        <p class="govuk-body-s sea-assumed-answer govuk-!-padding-top-2">
                                            Based on your type of property, we will assume that you have an @(UserDataHelper.HasInsulatedFloor(Model.UserDataModel) ? "insulated" : "uninsulated") solid concrete floor
                                        </p>
                                    }
                                    else if (UserDataHelper.HasSuspendedFloor(Model.UserDataModel))
                                    {
                                        <p class="govuk-body-s sea-assumed-answer govuk-!-padding-top-2">
                                            Based on your type of property, we will assume that you have an @(UserDataHelper.HasInsulatedFloor(Model.UserDataModel) ? "insulated" : "uninsulated") suspended timber floor
                                        </p>                                
                                    }
                                }
                            }
                         </text>)
            },
            Actions = new()
            {
                Classes = "govuk-!-width-one-quarter",
                Items = new()
                {
                    new()
                    {
                        Href = Url.Action(nameof(EnergyEfficiencyController.FloorConstruction_Get), "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = QuestionFlowPage.FloorConstruction}),
                        Text = "Change",
                        VisuallyHiddenText = "floor construction"
                    }
                }
            }
        });
        
        if (Model.UserDataModel.FloorConstruction is not FloorConstruction.DoNotKnow and not FloorConstruction.Other)
        {
            rows.Add(new()
            {
                Key = new() 
                {
                    Classes = "govuk-!-width-one-quarter",
                    Text = "Is your ground floor insulated?"
                },
                Value = new()
                {
                    Classes = "govuk-!-width-one-half",
                    Html = (@<text>
                                @(GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.FloorInsulated))
                                @if (Model.UserDataModel.FloorInsulated is FloorInsulated.DoNotKnow)
                                {
                                    if (Model.UserDataModel.Epc?.FloorConstruction is not null || !Model.UserDataModel.YearBuilt.HasValue && Model.UserDataModel.Epc?.ConstructionAgeBand is not null)
                                    {
                                        <p class="govuk-body-s sea-assumed-answer govuk-!-padding-top-2">
                                            Based on your Energy Performance Certificate, we will assume that you have an @(UserDataHelper.HasInsulatedFloor(Model.UserDataModel) ? "insulated" : "uninsulated") floor
                                        </p>
                                    }
                                    else if (Model.UserDataModel.YearBuilt.HasValue)
                                    {
                                        <p class="govuk-body-s sea-assumed-answer govuk-!-padding-top-1">
                                            Based on your type of property, we will assume that you have an @(UserDataHelper.HasInsulatedFloor(Model.UserDataModel) ? "insulated" : "uninsulated") floor
                                        </p>
                                    }
                                }
                             </text>)
                },
                Actions = new()
                {
                    Classes = "govuk-!-width-one-quarter",
                    Items = new()
                    {
                        new()
                        {
                            Href = Url.Action(nameof(EnergyEfficiencyController.FloorInsulated_Get), "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = QuestionFlowPage.FloorInsulated}),
                            Text = "Change",
                            VisuallyHiddenText = "is floor insulated"
                        }
                    }
                }
            });
        }
    }
    
    @if (Model.UserDataModel.PropertyType is not PropertyType.ApartmentFlatOrMaisonette || Model.UserDataModel.FlatType is FlatType.TopFloor)
    {
        rows.Add(new()
        {
            Key = new() 
            {
                Classes = "govuk-!-width-one-quarter",
                Text = "Is any part of your roof flat?"
            },
            Value = new()
            {
                Classes = "govuk-!-width-one-half",
                Text = GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.RoofConstruction)
            },
            Actions = new()
            {
                Classes = "govuk-!-width-one-quarter",
                Items = new()
                {
                    new()
                    {
                        Href = Url.Action(nameof(EnergyEfficiencyController.RoofConstruction_Get), "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = QuestionFlowPage.RoofConstruction}),
                        Text = "Change",
                        VisuallyHiddenText = "is roof flat"
                    }
                }
            }
        });

        if (Model.UserDataModel.RoofConstruction is not RoofConstruction.Flat)
        {
            rows.Add(new()
            {
                Key = new() 
                {
                    Classes = "govuk-!-width-one-quarter",
                    Text = "Do you have accessible loft space?"
                },
                Value = new()
                {
                    Classes = "govuk-!-width-one-half",
                    Text = GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.AccessibleLoftSpace)
                },
                Actions = new()
                {
                    Classes = "govuk-!-width-one-quarter",
                    Items = new()
                    {
                        new()
                        {
                            Href = Url.Action(nameof(EnergyEfficiencyController.AccessibleLoftSpace_Get), "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = QuestionFlowPage.AccessibleLoftSpace}),
                            Text = "Change",
                            VisuallyHiddenText = "accessible loft space"
                        }
                    }
                }
            });

            if (Model.UserDataModel.AccessibleLoftSpace is AccessibleLoftSpace.Yes)
            {
                rows.Add(new()
                {
                    Key = new() 
                    {
                        Classes = "govuk-!-width-one-quarter",
                        Text = "Is your loft fully insulated?"
                    },
                    Value = new()
                    {
                        Classes = "govuk-!-width-one-half",
                        Html = (@<text>
                                    @(GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.RoofInsulated))
                                    @if (Model.UserDataModel.RoofInsulated is RoofInsulated.DoNotKnow || Model.UserDataModel.AccessibleLoftSpace is AccessibleLoftSpace.DoNotKnow)
                                    {
                                        if (Model.UserDataModel.YearBuilt.HasValue)
                                        {
                                            <p class="govuk-body-s sea-assumed-answer govuk-!-padding-top-1">
                                                Based on your type of property, we will assume that you @(UserDataHelper.HasRoofInsulation(Model.UserDataModel) ? "have " : "do not have") a fully insulated loft
                                            </p>
                                        }
                                    }
                                 </text>)
                    },
                    Actions = new()
                    {
                        Classes = "govuk-!-width-one-quarter",
                        Items = new()
                        {
                            new()
                            {
                                Href = Url.Action(nameof(EnergyEfficiencyController.RoofInsulated_Get), "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = QuestionFlowPage.RoofInsulated}),
                                Text = "Change",
                                VisuallyHiddenText = "is roof insulated"
                            }
                        }
                    }
                });
            }
        }
    }
    
    rows.Add(new()
    {
        Key = new() 
        {
            Classes = "govuk-!-width-one-quarter",
            Text = "Glazing type "
        },
        Value = new()
        {
            Classes = "govuk-!-width-one-half",
            Text = GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.GlazingType)
        },
        Actions = new()
        {
            Classes = "govuk-!-width-one-quarter",
            Items = new()
            {
                new()
                {
                    Href = Url.Action(nameof(EnergyEfficiencyController.GlazingType_Get), "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = QuestionFlowPage.GlazingType}),
                    Text = "Change",
                    VisuallyHiddenText = "type of glazing"
                }
            }
        }
    });
    
    rows.Add(new()
    {
        Key = new() 
        {
            Classes = "govuk-!-width-one-quarter",
            Text = "Outdoor space for heat pump"
        },
        Value = new()
        {
            Classes = "govuk-!-width-one-half",
            Text = GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.HasOutdoorSpace)
        },
        Actions = new()
        {
            Classes = "govuk-!-width-one-quarter",
            Items = new()
            {
                new()
                {
                    Href = Url.Action(nameof(EnergyEfficiencyController.OutdoorSpace_Get), "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = QuestionFlowPage.OutdoorSpace}),
                    Text = "Change",
                    VisuallyHiddenText = "outdoor space"
                }
            }
        }
    });
    
    rows.Add(new()
    {
        Key = new() 
        {
            Classes = "govuk-!-width-one-quarter",
            Text = "Heating system "
        },
        Value = new()
        {
            Classes = "govuk-!-width-one-half",
            Html = (@<text>
                        @{
                            <span>
                                @(Model.UserDataModel.HeatingType == HeatingType.Other 
                                    ? $"{GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.HeatingType)} - {GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.OtherHeatingType)}" 
                                    : GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.HeatingType))
                            </span>
                        }
                     </text>)
        },
        Actions = new()
        {
            Classes = "govuk-!-width-one-quarter",
            Items = new()
            {
                new()
                {
                    Href = Url.Action(nameof(EnergyEfficiencyController.HeatingType_Get), "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = QuestionFlowPage.HeatingType}),
                    Text = "Change",
                    VisuallyHiddenText = "how you heat your home"
                }
            }
        }
    });
    
    rows.Add(new()
    {
        Key = new() 
        {
            Classes = "govuk-!-width-one-quarter",
            Text = "Hot water cylinder "
        },
        Value = new()
        {
            Classes = "govuk-!-width-one-half",
            Html = (@<text>
                        @if (Model.UserDataModel.HasHotWaterCylinder.HasValue)
                        {
                            @(GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.HasHotWaterCylinder))
                        }
                        else
                        {
                            if (Model.UserDataModel.HeatingType is HeatingType.GasBoiler or HeatingType.OilBoiler or HeatingType.LpgBoiler)
                            {
                                @(GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.HasHotWaterCylinder))
                            }
                            else
                            {
                                @:Yes
                            }
                        }
                     </text>)
        },
        Actions = new()
        {
            Classes = "govuk-!-width-one-quarter",
            Items = new()
            {
                new()
                {
                    Href = Url.Action(nameof(EnergyEfficiencyController.HotWaterCylinder_Get), "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = QuestionFlowPage.HotWaterCylinder}),
                    Text = "Change",
                    VisuallyHiddenText = "do you have a hot water cylinder"
                }
            }
        }
    });
    
    rows.Add(new()
    {
        Key = new() 
        {
            Classes = "govuk-!-width-one-quarter",
            Text = "Size of household"
        },
        Value = new()
        {
            Classes = "govuk-!-width-one-half",
            Text = Model.UserDataModel.NumberOfOccupants?.ToString() ?? "Question skipped"
        },
        Actions = new()
        {
            Classes = "govuk-!-width-one-quarter",
            Items = new()
            {
                new()
                {
                    Href = Url.Action(nameof(EnergyEfficiencyController.NumberOfOccupants_Get), "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = QuestionFlowPage.NumberOfOccupants}),
                    Text = "Change",
                    VisuallyHiddenText = "number of people over 5 in the home"
                }
            }
        }
    });
    
    rows.Add(new()
    {
        Key = new() 
        {
            Classes = "govuk-!-width-one-quarter",
            Text = "Heating pattern"
        },
        Value = new()
        {
            Classes = "govuk-!-width-one-half",
            Html = (@<text>
                        @{
                            if (Model.UserDataModel.HeatingPattern is HeatingPattern.Other)
                            {
                                <span>
                                    @Model.UserDataModel.HoursOfHeatingMorning.ToString() hours in the morning
                                    <br />
                                    @Model.UserDataModel.HoursOfHeatingEvening.ToString() hours in the afternoon and evening
                                </span>
                            }
                            else
                            {
                                <span>
                                    @GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.HeatingPattern)
                                </span>
                            }}
                     </text>)
        },
        Actions = new()
        {
            Classes = "govuk-!-width-one-quarter",
            Items = new()
            {
                new()
                {
                    Href = Url.Action(nameof(EnergyEfficiencyController.HeatingPattern_Get), "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = QuestionFlowPage.HeatingPattern}),
                    Text = "Change",
                    VisuallyHiddenText = "heating pattern"
                }
            }
        }
    });

    rows.Add(new()
    {
        Key = new() 
        {
            Classes = "govuk-!-width-one-quarter",
            Text = "Temperature"
        },
        Value = new()
        {
            Classes = "govuk-!-width-one-half",
            Text = Model.UserDataModel.Temperature.HasValue ? Model.UserDataModel.Temperature.Value + "°C" : "Question skipped"
        },
        Actions = new()
        {
            Classes = "govuk-!-width-one-quarter",
            Items = new()
            {
                new()
                {
                    Href = Url.Action(nameof(EnergyEfficiencyController.Temperature_Get), "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = QuestionFlowPage.Temperature}),
                    Text = "Change",
                    VisuallyHiddenText = "temperature"
                }
            }
        }
    });
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        <h1 class="govuk-heading-l">
            Check your answers
        </h1>
        <div class="govuk-hint">
            Please review the information we have gathered. You can still change your answers if anything looks wrong.
        </div>
    
        @(await Html.GovUkSummaryList(new SummaryListViewModel
        {
            Rows = rows
        }))
        
        <form action="@Url.Action("AnswerSummary_Post", "EnergyEfficiency", new { reference = Model.UserDataModel.Reference })" method="post" novalidate>
            @Html.AntiForgeryToken()
            @await Html.GovUkButton(new ButtonViewModel
            {
                Html = @<text>
                           See results
                           <svg class="govuk-button__start-icon" xmlns="http://www.w3.org/2000/svg" width="17.5" height="19" viewBox="0 0 33 40" aria-hidden="true" focusable="false">
                               <path fill="currentColor" d="M0 0h13l20 20-20 20H0l20-20z"/>
                           </svg>
                        </text>,
                Classes = "govuk-!-margin-top-2 govuk-!-margin-bottom-8 govuk-button--start"
            })
        </form>
    </div>
</div>
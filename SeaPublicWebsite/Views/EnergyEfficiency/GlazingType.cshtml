@using GovUkDesignSystem
@using GovUkDesignSystem.GovUkDesignSystemComponents
@using GovUkDesignSystem.GovUkDesignSystemComponents.SubComponents
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using SeaPublicWebsite.BusinessLogic.Models.Enums

@model SeaPublicWebsite.Models.EnergyEfficiency.GlazingTypeViewModel;
@{
    ViewBag.Title = "Glazing Type";
}

@section BackLink {
    @await Html.GovUkBackLink(new BackLinkViewModel
    {
        Text = "Back",
        Href = Model.BackLink,
        
        // Note: some of the "Back" links in this journey can't use the default browser behaviour
        //  so we should control all of them explicitly
        OverrideWithJavascript = false
    })
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        
        <form action="@Url.Action("GlazingType_Post", "EnergyEfficiency", new {reference = Model.Reference})" method="post" novalidate>
            @(Html.HiddenFor(m => m.EntryPoint))
            @Html.AntiForgeryToken()
            
            @{
                Func<object, object> details = 
                    @<text>
                        <p class="govuk-body">
                            A single glazed window has a single pane of glass.
                        </p>
                        <p class="govuk-body">
                            A double glazed window has two panes of glass, separated by air or gas, to make up a single window. A triple glazed window has three panes of glass.
                        </p>
                        <p class="govuk-body">
                            Secondary glazing is when an additional independent window is fitted inside, behind the main window. This is commonly used in conservation areas to improve the energy efficiency of the window without replacing it.
                        </p>
                     </text>;
                
                Func<object, object> epcHint = null;
                if (Model.Epc?.GlazingType is not null)
                {
                    Func<object, object> suggestion = Model.Epc?.GlazingType switch {
                        GlazingType.SingleGlazed => 
                            @<text>
                                all your windows are <strong>single glazed</strong>.
                             </text>,
                        GlazingType.Both => 
                            @<text>
                                at least one of your windows is <strong>single glazed</strong>.
                             </text>,
                        GlazingType.DoubleOrTripleGlazed => 
                            @<text>
                                all your windows are <strong>double, triple or secondary glazed</strong>.
                             </text>,
                        _ => throw new ArgumentOutOfRangeException()};
                    epcHint = 
                        @<p class="govuk-body">
                            Your @Model.Epc?.LodgementDate?.Year Energy Performance Certificate suggests 
                            @await Html.GovUkHtmlText(new HtmlText(suggestion, null))
                        </p>;
                }
            }
            
            @(await Html.GovUkRadiosFor(m => m.GlazingType,
                fieldsetOptions: new FieldsetViewModel
                {
                    Legend = new LegendViewModel
                    {
                        Text = "Are any of your windows single glazed?",
                        Classes = "govuk-fieldset__legend--l",
                        IsPageHeading = true
                    }
                },
                hintOptions: new HintViewModel
                {
                    Html = @<text>
                               @await Html.GovUkDetails(new DetailsViewModel
                               {
                                   SummaryText = "Help me answer this question",
                                   Html = details
                               })
                               
                               @if (epcHint is not null)
                               {
                                   @await Html.GovUkInsetText(new InsetTextViewModel
                                   {
                                       Classes = "sea-epc-hint",
                                       Html = epcHint
                                   })
                               }
                            </text>
                }
            ))

            @await Html.GovUkButton(new ButtonViewModel
            {
                Text = "Continue"
            })
            
        </form>
        
    </div>
</div>

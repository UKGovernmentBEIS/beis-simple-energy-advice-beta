@using GovUkDesignSystem
@using GovUkDesignSystem.Attributes
@using GovUkDesignSystem.GovUkDesignSystemComponents
@using SeaPublicWebsite.Helpers
@using SeaPublicWebsite.Helpers.UserFlow
@using SeaPublicWebsite.Models.EnergyEfficiency.QuestionOptions
@model SeaPublicWebsite.Models.EnergyEfficiency.AnswerSummaryViewModel
@{
    ViewBag.Title = "Your answers";
}

@section BeforeMain {
    @await Html.GovUkBackLink(new BackLinkViewModel
    {
        Text = "Back",
        Href = Model.BackLink,

        // Note: some of the "Back" links in this journey can't use the default browser behaviour
        //  so we should control all of them explicitly
        OverrideWithJavascript = false
    })
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        <h1 class="govuk-heading-l">
            Check your answers
        </h1>
        <div class="govuk-hint">
            Please review the information we have gathered. You can still change your answers if anything looks wrong.
        </div>
    
        <dl class="govuk-summary-list">
            <div class="govuk-summary-list__row">
                <dt class="govuk-summary-list__key govuk-!-width-one-quarter">
                    Building type
                </dt>
                <dd class="govuk-summary-list__value govuk-!-width-one-half">
                    @(Model.UserDataModel.PropertyType == PropertyType.House ? GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.HouseType) : null)
                    @(Model.UserDataModel.PropertyType == PropertyType.Bungalow ? GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.BungalowType) : null)
                    @(Model.UserDataModel.PropertyType == PropertyType.ApartmentFlatOrMaisonette ? GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.FlatType) : null)
                    @(GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.PropertyType))
                </dd>
                <dd class="govuk-summary-list__actions govuk-!-width-one-quarter">
                    <a class="govuk-link" href="@Url.Action("PropertyType_Get", "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = PageName.PropertyType})">
                        Change<span class="govuk-visually-hidden"> address</span>
                    </a>
                </dd>
            </div>
            <div class="govuk-summary-list__row">
                <dt class="govuk-summary-list__key govuk-!-width-one-quarter">
                    Year home was built
                </dt>
                <dd class="govuk-summary-list__value govuk-!-width-one-half">
                    @(Model.UserDataModel.YearBuilt?.ToString() ?? "I'm not sure")
                </dd>
                <dd class="govuk-summary-list__actions govuk-!-width-one-quarter">
                    <a class="govuk-link" href="@Url.Action("HomeAge_Get", "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = PageName.HomeAge})">
                        Change<span class="govuk-visually-hidden"> home type</span>
                    </a>
                </dd>
            </div>
            <div class="govuk-summary-list__row">
                <dt class="govuk-summary-list__key govuk-!-width-one-quarter">
                    Wall type 
                </dt>
                <dd class="govuk-summary-list__value govuk-!-width-one-half">
                    @(GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.WallConstruction))
                    @if (Model.UserDataModel.WallConstruction == WallConstruction.DoNotKnow)
                    {
                        if (Model.UserDataModel.Epc?.WallConstruction != null || !Model.UserDataModel.YearBuilt.HasValue &&  Model.UserDataModel.Epc?.ConstructionAgeBand != null)
                        {
                            if (UserDataHelper.HasCavityWalls(Model.UserDataModel))
                            {
                                <p class="govuk-body-s sea-assumed-answer govuk-!-padding-top-2">
                                    Based on your Energy Performance Certificate, we will assume that you have @(UserDataHelper.HasInsulatedCavityWalls(Model.UserDataModel) ? "insulated" : "uninsulated") cavity walls
                                </p>
                            }
                            else if (UserDataHelper.HasSolidWalls(Model.UserDataModel))
                            {
                                <p class="govuk-body-s sea-assumed-answer govuk-!-padding-top-2">
                                    Based on your Energy Performance Certificate, we will assume that you have @(UserDataHelper.HasInsulatedSolidWalls(Model.UserDataModel) ? "insulated" : "uninsulated") solid walls
                                </p>
                            }
                        }
                        else if (Model.UserDataModel.YearBuilt.HasValue)
                        {
                            if (UserDataHelper.HasCavityWalls(Model.UserDataModel))
                            {
                                <p class="govuk-body-s sea-assumed-answer govuk-!-padding-top-2">
                                    Based on your type of property, we will assume that you have @(UserDataHelper.HasInsulatedCavityWalls(Model.UserDataModel) ? "insulated" : "uninsulated") cavity walls
                                </p>
                            }
                            else if (UserDataHelper.HasSolidWalls(Model.UserDataModel))
                            {
                                <p class="govuk-body-s sea-assumed-answer govuk-!-padding-top-2">
                                    Based on your type of property, we will assume that you have @(UserDataHelper.HasInsulatedSolidWalls(Model.UserDataModel) ? "insulated" : "uninsulated") solid walls
                                </p>                                
                            }
                        }
                    }
                </dd>
                <dd class="govuk-summary-list__actions govuk-!-width-one-quarter">
                    <a class="govuk-link" href="@Url.Action("WallConstruction_Get", "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = PageName.WallConstruction})">
                        Change<span class="govuk-visually-hidden"> type of walls
                        </span>
                    </a>
                </dd>
            </div>

            @if (Model.UserDataModel.WallConstruction == WallConstruction.Cavity ||
                 Model.UserDataModel.WallConstruction == WallConstruction.Mixed)
            {
                <div class="govuk-summary-list__row">
                    <dt class="govuk-summary-list__key govuk-!-width-one-quarter">
                        Are your cavity walls insulated? 
                    </dt>
                    <dd class="govuk-summary-list__value govuk-!-width-one-half">
                        @(GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.CavityWallsInsulated))
                        @if (Model.UserDataModel.CavityWallsInsulated == CavityWallsInsulated.DoNotKnow)
                        {
                            if (Model.UserDataModel.Epc != null && (Model.UserDataModel.Epc.CavityWallsInsulated != null || Model.UserDataModel.Epc.ConstructionAgeBand != null))
                            {
                                <p class="govuk-body-s sea-assumed-answers">
                                    Based on your Energy Performance Certificate, we will assume that you have @(UserDataHelper.HasInsulatedCavityWalls(Model.UserDataModel) ? "insulated" : "uninsulated") cavity walls
                                </p>
                            }
                            else if (Model.UserDataModel.YearBuilt.HasValue)
                            {
                                <p class="govuk-body-s sea-assumed-answer govuk-!-padding-top-2">
                                    Based on your type of property, we will assume that you have @(UserDataHelper.HasInsulatedCavityWalls(Model.UserDataModel) ? "insulated" : "uninsulated") cavity walls
                                </p>
                            }
                        }
                    </dd>
                    <dd class="govuk-summary-list__actions govuk-!-width-one-quarter">
                        <a class="govuk-link" href="@Url.Action("CavityWallsInsulated_Get", "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = PageName.CavityWallsInsulated})">
                            Change<span class="govuk-visually-hidden"> are cavity walls insulated
                            </span>
                        </a>
                    </dd>
                </div>
            }
            @if (Model.UserDataModel.WallConstruction == WallConstruction.Solid ||
                 Model.UserDataModel.WallConstruction == WallConstruction.Mixed)
            {
                <div class="govuk-summary-list__row">
                    <dt class="govuk-summary-list__key govuk-!-width-one-quarter">
                        Are your solid walls insulated? 
                    </dt>
                    <dd class="govuk-summary-list__value govuk-!-width-one-half">
                        @(GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.SolidWallsInsulated))
                        @if (Model.UserDataModel.SolidWallsInsulated == SolidWallsInsulated.DoNotKnow)
                        {
                            if (Model.UserDataModel.Epc != null && (Model.UserDataModel.Epc.SolidWallsInsulated != null || Model.UserDataModel.Epc.ConstructionAgeBand != null))
                            {
                                <p class="govuk-body-s sea-assumed-answer govuk-!-padding-top-2">
                                    Based on your Energy Performance Certificate, we will assume that you have @(UserDataHelper.HasInsulatedSolidWalls(Model.UserDataModel) ? "insulated" : "uninsulated") solid walls
                                </p>
                            }
                            else if (Model.UserDataModel.YearBuilt.HasValue)
                            {
                                <p class="govuk-body-s sea-assumed-answer govuk-!-padding-top-1">
                                    Based on your type of property, we will assume that you have @(UserDataHelper.HasInsulatedSolidWalls(Model.UserDataModel) ? "insulated" : "uninsulated") solid walls
                                </p>
                            }
                        }
                    </dd>
                    <dd class="govuk-summary-list__actions govuk-!-width-one-quarter">
                        <a class="govuk-link" href="@Url.Action("SolidWallsInsulated_Get", "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = PageName.SolidWallsInsulated})">
                            Change<span class="govuk-visually-hidden"> are solid walls insulated
                            </span>
                        </a>
                    </dd>
                </div>
            }
            
            @if (Model.UserDataModel.PropertyType != PropertyType.ApartmentFlatOrMaisonette || Model.UserDataModel.FlatType == FlatType.GroundFloor)
            {
                <div class="govuk-summary-list__row">
                    <dt class="govuk-summary-list__key govuk-!-width-one-quarter">
                        Floor construction 
                    </dt>
                    <dd class="govuk-summary-list__value govuk-!-width-one-half">
                        @(GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.FloorConstruction))
                        @if (Model.UserDataModel.FloorConstruction == FloorConstruction.DoNotKnow)
                        {
                            if (Model.UserDataModel.Epc?.FloorConstruction != null || !Model.UserDataModel.YearBuilt.HasValue && Model.UserDataModel.Epc?.ConstructionAgeBand != null)
                            {
                                if (UserDataHelper.HasSolidFloor(Model.UserDataModel))
                                {
                                    <p class="govuk-body-s sea-assumed-answer govuk-!-padding-top-2">
                                        Based on your Energy Performance Certificate, we will assume that you have an @(UserDataHelper.HasInsulatedFloor(Model.UserDataModel) ? "insulated" : "uninsulated") solid concrete floor
                                    </p>
                                }
                                else if (UserDataHelper.HasSuspendedFloor(Model.UserDataModel))
                                {
                                    <p class="govuk-body-s sea-assumed-answer govuk-!-padding-top-2">
                                        Based on your Energy Performance Certificate, we will assume that you have an @(UserDataHelper.HasInsulatedFloor(Model.UserDataModel) ? "insulated" : "uninsulated") suspended timber floor
                                    </p>
                                }
                            }
                            else if (Model.UserDataModel.YearBuilt.HasValue)
                            {
                                if (UserDataHelper.HasSolidFloor(Model.UserDataModel))
                                {
                                    <p class="govuk-body-s sea-assumed-answer govuk-!-padding-top-2">
                                        Based on your type of property, we will assume that you have an @(UserDataHelper.HasInsulatedFloor(Model.UserDataModel) ? "insulated" : "uninsulated") solid concrete floor
                                    </p>
                                }
                                else if (UserDataHelper.HasSuspendedFloor(Model.UserDataModel))
                                {
                                    <p class="govuk-body-s sea-assumed-answer govuk-!-padding-top-2">
                                        Based on your type of property, we will assume that you have an @(UserDataHelper.HasInsulatedFloor(Model.UserDataModel) ? "insulated" : "uninsulated") suspended timber floor
                                    </p>                                
                                }
                            }
                        }
                    </dd>
                    <dd class="govuk-summary-list__actions govuk-!-width-one-quarter">
                        <a class="govuk-link" href="@Url.Action("FloorConstruction_Get", "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = PageName.FloorConstruction})">
                            Change<span class="govuk-visually-hidden"> floor construction</span>
                        </a>
                    </dd>
                </div>
                @if (Model.UserDataModel.FloorConstruction != FloorConstruction.DoNotKnow && Model.UserDataModel.FloorConstruction != FloorConstruction.Other)
                {
                    <div class="govuk-summary-list__row">
                        <dt class="govuk-summary-list__key govuk-!-width-one-quarter">
                            Is your ground floor insulated?
                        </dt>
                        <dd class="govuk-summary-list__value govuk-!-width-one-half">
                            @(GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.FloorInsulated))
                            @if (Model.UserDataModel.FloorInsulated == FloorInsulated.DoNotKnow)
                            {
                                if (Model.UserDataModel.Epc?.FloorConstruction != null || !Model.UserDataModel.YearBuilt.HasValue && Model.UserDataModel.Epc?.ConstructionAgeBand != null)
                                {
                                    <p class="govuk-body-s sea-assumed-answer govuk-!-padding-top-2">
                                        Based on your Energy Performance Certificate, we will assume that you have an @(UserDataHelper.HasInsulatedFloor(Model.UserDataModel) ? "insulated" : "uninsulated") floor
                                    </p>
                                }
                                else if (Model.UserDataModel.YearBuilt.HasValue)
                                {
                                    <p class="govuk-body-s sea-assumed-answer govuk-!-padding-top-1">
                                        Based on your type of property, we will assume that you have an @(UserDataHelper.HasInsulatedFloor(Model.UserDataModel) ? "insulated" : "uninsulated") floor
                                    </p>
                                }
                            }
                        </dd>
                        <dd class="govuk-summary-list__actions govuk-!-width-one-quarter">
                            <a class="govuk-link" href="@Url.Action("FloorInsulated_Get", "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = PageName.FloorInsulated})">
                                Change<span class="govuk-visually-hidden"> is floor insulated</span>
                            </a>
                        </dd>
                    </div>
                }
            }

            @if (Model.UserDataModel.PropertyType != PropertyType.ApartmentFlatOrMaisonette || Model.UserDataModel.FlatType == FlatType.TopFloor)
            {
                <div class="govuk-summary-list__row">
                    <dt class="govuk-summary-list__key govuk-!-width-one-quarter">
                        Is any part of your roof flat? 
                    </dt>
                    <dd class="govuk-summary-list__value govuk-!-width-one-half">
                        @(GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.RoofConstruction))
                    </dd>
                    <dd class="govuk-summary-list__actions govuk-!-width-one-quarter">
                        <a class="govuk-link" href="@Url.Action("RoofConstruction_Get", "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = PageName.RoofConstruction})">
                            Change<span class="govuk-visually-hidden"> is roof flat</span>
                        </a>
                    </dd>
                </div>
                @if (Model.UserDataModel.RoofConstruction != RoofConstruction.Flat)
                {
                    <div class="govuk-summary-list__row">
                        <dt class="govuk-summary-list__key govuk-!-width-one-quarter">
                            Do you have accessible loft space?
                        </dt>
                        <dd class="govuk-summary-list__value govuk-!-width-one-half">
                            @(GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.AccessibleLoftSpace))
                        </dd>
                        <dd class="govuk-summary-list__actions govuk-!-width-one-quarter">
                            <a class="govuk-link" href="@Url.Action("AccessibleLoftSpace_Get", "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = PageName.AccessibleLoftSpace})">
                                Change<span class="govuk-visually-hidden"> accessible loft space</span>
                            </a>
                        </dd>
                    </div>
                    @if (Model.UserDataModel.AccessibleLoftSpace == AccessibleLoftSpace.Yes || Model.UserDataModel.AccessibleLoftSpace == AccessibleLoftSpace.DoNotKnow)
                    {
                        <div class="govuk-summary-list__row">
                            <dt class="govuk-summary-list__key govuk-!-width-one-quarter">
                                Is your loft fully insulated?
                            </dt>
                            <dd class="govuk-summary-list__value govuk-!-width-one-half">
                                @(GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.RoofInsulated))
                                @if (Model.UserDataModel.RoofInsulated == RoofInsulated.DoNotKnow || Model.UserDataModel.AccessibleLoftSpace == AccessibleLoftSpace.DoNotKnow)
                                {
                                    if (Model.UserDataModel.YearBuilt.HasValue)
                                    {
                                        <p class="govuk-body-s sea-assumed-answer govuk-!-padding-top-1">
                                            Based on your type of property, we will assume that you @(UserDataHelper.HasRoofInsulation(Model.UserDataModel) ? "have " : "do not have") a fully insulated loft
                                        </p>
                                    }
                                }
                            </dd>
                            <dd class="govuk-summary-list__actions govuk-!-width-one-quarter">
                                <a class="govuk-link" href="@Url.Action("RoofInsulated_Get", "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = PageName.RoofInsulated})">
                                    Change<span class="govuk-visually-hidden"> is roof insulated</span>
                                </a>
                            </dd>
                        </div>
                    }
                }
            }

            <div class="govuk-summary-list__row">
                <dt class="govuk-summary-list__key govuk-!-width-one-quarter">
                    Glazing type 
                </dt>
                <dd class="govuk-summary-list__value govuk-!-width-one-half">
                    @(GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.GlazingType))
                </dd>
                <dd class="govuk-summary-list__actions govuk-!-width-one-quarter">
                    <a class="govuk-link" href="@Url.Action("GlazingType_Get", "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = PageName.GlazingType})">
                        Change<span class="govuk-visually-hidden"> type of glazing</span>
                    </a>
                </dd>
            </div>
            <div class="govuk-summary-list__row">
                <dt class="govuk-summary-list__key govuk-!-width-one-quarter">
                    Outdoor space for heat pump
                </dt>
                <dd class="govuk-summary-list__value govuk-!-width-one-half">
                    @(GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.HasOutdoorSpace))
                </dd>
                <dd class="govuk-summary-list__actions govuk-!-width-one-quarter">
                    <a class="govuk-link" href="@Url.Action("OutdoorSpace_Get", "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = PageName.OutdoorSpace})">
                        Change<span class="govuk-visually-hidden"> outdoor space</span>
                    </a>
                </dd>
            </div>
            <div class="govuk-summary-list__row">
                <dt class="govuk-summary-list__key govuk-!-width-one-quarter">
                    Heating system 
                </dt>
                <dd class="govuk-summary-list__value govuk-!-width-one-half">
                    @{
                        var heatingTypeText = "";
                        if (Model.UserDataModel.HeatingType == HeatingType.Other)
                        {
                            heatingTypeText = $"{GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.HeatingType)} - {GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.OtherHeatingType)}";
                        }
                        else
                        {
                            heatingTypeText = GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.HeatingType);
                        }
                        <span>@(heatingTypeText)</span>
                    }
                </dd>
                <dd class="govuk-summary-list__actions govuk-!-width-one-quarter">
                    <a class="govuk-link" href="@Url.Action("HeatingType_Get", "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = PageName.HeatingType})">
                        Change<span class="govuk-visually-hidden"> how you heat your home</span>
                    </a>
                </dd>
            </div>
            
            @if (Model.UserDataModel.HeatingType is HeatingType.GasBoiler or HeatingType.OilBoiler or HeatingType.LpgBoiler)
            {
                <div class="govuk-summary-list__row">
                    <dt class="govuk-summary-list__key govuk-!-width-one-quarter">
                        Hot water cylinder
                    </dt>
                    <dd class="govuk-summary-list__value govuk-!-width-one-half">
                        @(GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.HasHotWaterCylinder))
                    </dd>
                    <dd class="govuk-summary-list__actions govuk-!-width-one-quarter">
                        <a class="govuk-link" href="@Url.Action("HotWaterCylinder_Get", "EnergyEfficiency", new { reference = Model.UserDataModel.Reference, entryPoint = PageName.HotWaterCylinder })">
                            Change<span class="govuk-visually-hidden"> do you have a hot water cylinder</span>
                        </a>
                    </dd>
                </div>
            }
            <div class="govuk-summary-list__row">
                <dt class="govuk-summary-list__key govuk-!-width-one-quarter">
                    Size of household 
                </dt>
                <dd class="govuk-summary-list__value govuk-!-width-one-half">
                    @(Model.UserDataModel.NumberOfOccupants?.ToString() ?? "Question skipped")
                </dd>
                <dd class="govuk-summary-list__actions govuk-!-width-one-quarter">
                    <a class="govuk-link" href="@Url.Action("NumberOfOccupants_Get", "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = PageName.NumberOfOccupants})">
                        Change<span class="govuk-visually-hidden"> number of people over 5 in the home</span>
                    </a>
                </dd>
            </div>
            <div class="govuk-summary-list__row">
                <dt class="govuk-summary-list__key govuk-!-width-one-quarter">
                    Heating pattern
                </dt>
                <dd class="govuk-summary-list__value govuk-!-width-one-half">
                    @{
                        var heatingPatternText = "";
                        if (Model.UserDataModel.HeatingPattern == HeatingPattern.Other)
                        {
                            heatingPatternText = $"{GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.HeatingPattern)} - {Model.UserDataModel.HoursOfHeating.ToString()} hours";
                        }
                        else
                        {
                            heatingPatternText = GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.UserDataModel.HeatingPattern);
                        }
                        <span>@(heatingPatternText)</span>
                    }
                </dd>
                <dd class="govuk-summary-list__actions govuk-!-width-one-quarter">
                    <a class="govuk-link" href="@Url.Action("HeatingPattern_Get", "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = PageName.HeatingPattern})">
                        Change<span class="govuk-visually-hidden"> heating pattern</span>
                    </a>
                </dd>
            </div>
        <div class="govuk-summary-list__row">
            <dt class="govuk-summary-list__key govuk-!-width-one-quarter">
                Temperature
            </dt>
            <dd class="govuk-summary-list__value govuk-!-width-one-half">
                @(Model.UserDataModel.Temperature.HasValue ? Model.UserDataModel.Temperature.Value + "°C" : "Question skipped")
            </dd>
            <dd class="govuk-summary-list__actions govuk-!-width-one-quarter">
                <a class="govuk-link" href="@Url.Action("Temperature_Get", "EnergyEfficiency", new {reference = Model.UserDataModel.Reference, entryPoint = PageName.Temperature})">
                    Change<span class="govuk-visually-hidden"> temperature</span>
                </a>
            </dd>
        </div>

        </dl>

        <a href="@Url.Action("YourRecommendations_Get", "EnergyEfficiency", new {reference = Model.UserDataModel.Reference})" role="button" draggable="false" class="govuk-button govuk-!-margin-top-2 govuk-!-margin-bottom-8 govuk-button--start" data-module="govuk-button">
            See results
            <svg class="govuk-button__start-icon" xmlns="http://www.w3.org/2000/svg" width="17.5" height="19" viewBox="0 0 33 40" aria-hidden="true" focusable="false">
                <path fill="currentColor" d="M0 0h13l20 20-20 20H0l20-20z"/>
            </svg>
        </a>
    </div>
</div>
@using GovUkDesignSystem
@using GovUkDesignSystem.GovUkDesignSystemComponents
@using GovUkDesignSystem.GovUkDesignSystemComponents.SubComponents
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using SeaPublicWebsite.BusinessLogic.Models.Enums
@using SeaPublicWebsite.Controllers
@using Microsoft.AspNetCore.Mvc.Localization
@inject IHtmlLocalizer<SharedResources> SharedLocalizer

@model SeaPublicWebsite.Models.EnergyEfficiency.GlazingTypeViewModel;
@{
    ViewBag.Title = @SharedLocalizer["Glazing Type"];
}

@section BeforeMain {
    @await Html.GovUkBackLink(new BackLinkViewModel
           {
               Text = @SharedLocalizer["Back"].Value,
               Href = Model.BackLink,
           })
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        
        <form action="@Url.Action(nameof(EnergyEfficiencyController.GlazingType_Post), "EnergyEfficiency", new {reference = Model.Reference})" method="post" novalidate>
            @(Html.HiddenFor(m => m.EntryPoint))
            @Html.AntiForgeryToken()
            
            @{
                Func<object, object> details = 
                    @<text>
                        <p class="govuk-body">
                            @SharedLocalizer["A single glazed window has a single pane of glass."]
                        </p>
                        <p class="govuk-body">
                            @SharedLocalizer["A double glazed window has two panes of glass, separated by air or gas, to make up a single window. A triple glazed window has three panes of glass."]
                        </p>
                        <p class="govuk-body">
                            @SharedLocalizer["Secondary glazing is when an additional independent window is fitted inside, behind the main window. This is commonly used in conservation areas to improve the energy efficiency of the window without replacing it."]
                        </p>
                     </text>;
                
                Func<object, object> blueBannerHint = null;
                if (Model.Epc?.GlazingType is not null)
                {
                    blueBannerHint = 
                    @<p class="govuk-body">
                            @(Model.Epc?.GlazingType switch {
                                GlazingType.SingleGlazed => @SharedLocalizer["EPCSuggestsAllWindowsAreSingleGlazedString", Model.Epc.LodgementYear],
                                GlazingType.Both => @SharedLocalizer["EPCSuggestsAtLeastOneWindowSingleGlazedString", Model.Epc.LodgementYear],
                                GlazingType.DoubleOrTripleGlazed => @SharedLocalizer["EPCSuggestsAllYourWindowsAreDoubleOrTripleGlazedString", Model.Epc.LodgementYear],
                                _ => throw new ArgumentOutOfRangeException()})
                    </p>;
                } else if (Model.HintSingleGlazing is not null)
                {
                    blueBannerHint =
                        @<p class="govuk-body">
                            @(Model.HintSingleGlazing is true
                                ? @SharedLocalizer["HomesOfYourTypeTypicallyWereBuiltWithSingleGlazingString"] 
                                : @SharedLocalizer["HomesOfYourTypeTypicallyWereBuiltWithSingleDoubleOrTripleGlazingString"])
                        </p>;
                }
            }
            
            @(await Html.GovUkRadiosFor(m => m.GlazingType,
                fieldsetOptions: new FieldsetViewModel
                {
                    Legend = new LegendViewModel
                    {
                        Text = @SharedLocalizer["Are any of your windows single glazed?"].Value,
                        Classes = "govuk-fieldset__legend--l",
                        IsPageHeading = true
                    }
                },
                hintOptions: new HintViewModel
                {
                    Html = @<text>
                               @await Html.GovUkDetails(new DetailsViewModel
                                      {
                                          SummaryText = @SharedLocalizer["Help me answer this question"].Value,
                                          Html = details
                                      })
                               
                               @if (blueBannerHint is not null)
                               {
                                   @await Html.GovUkInsetText(new InsetTextViewModel
                                          {
                                              Classes = "sea-epc-hint",
                                              Html = blueBannerHint
                                          })
                               }
                            </text>
                }
                ))

            @await Html.GovUkButton(new ButtonViewModel
                   {
                       Text = @SharedLocalizer["Continue"].Value
                   })
            
        </form>
        
    </div>
    <div class="govuk-grid-column-one-third">
        @await Html.PartialAsync("/Views/EnergyEfficiency/Partials/_AdditionalSupport.cshtml")
    </div>
</div>
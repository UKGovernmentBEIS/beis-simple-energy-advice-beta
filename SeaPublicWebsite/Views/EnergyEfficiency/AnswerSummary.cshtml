@using GovUkDesignSystem
@using GovUkDesignSystem.Attributes
@using GovUkDesignSystem.GovUkDesignSystemComponents
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using SeaPublicWebsite.BusinessLogic.Models.Enums
@using SeaPublicWebsite.Controllers
@using SeaPublicWebsite.Helpers
@using SeaPublicWebsite.Services
@using Microsoft.AspNetCore.Mvc.Localization
@inject IHtmlLocalizer<SharedResources> SharedLocalizer

@model SeaPublicWebsite.Models.EnergyEfficiency.AnswerSummaryViewModel
@{
    ViewBag.Title = SharedLocalizer["Your answers"];
}

@section BeforeMain {
    @await Html.GovUkBackLink(new BackLinkViewModel
           {
               Text = SharedLocalizer["Back"].Value,
               Href = Model.BackLink,
           })
}

@{
    var rows = new List<SummaryListRowViewModel>();

    rows.Add(new()
    {
        Key = new() 
        {
            Classes = "govuk-!-width-one-quarter",
            Text = SharedLocalizer["Wall type"].Value
        },
        Value = new()
        {
            Classes = "govuk-!-width-one-half",
            Text = GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.PropertyData.WallConstruction)
        },
        Actions = new()
        {
            Classes = "govuk-!-width-one-quarter",
            Items = new()
            {
                new()
                {
                    Href = @Url.Action(nameof(EnergyEfficiencyController.WallConstruction_Get), "EnergyEfficiency", new {reference = Model.PropertyData.Reference, entryPoint = QuestionFlowStep.WallConstruction}),
                    Text = SharedLocalizer["Change"].Value,
                    VisuallyHiddenText = SharedLocalizer["wall type"].Value
                }
            }
        }
    });

    if (Model.PropertyData.WallConstruction is WallConstruction.Cavity or WallConstruction.Mixed)
    {
        rows.Add(new()
        {
            Key = new()
            {
                Classes = "govuk-!-width-one-quarter",
                Text = SharedLocalizer["Are your cavity walls insulated?"].Value
            },
            Value = new()
            {
                Classes = "govuk-!-width-one-half",
                Text = GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.PropertyData.CavityWallsInsulated)
            },
            Actions = new()
            {
                Classes = "govuk-!-width-one-quarter",
                Items = new()
                {
                    new()
                    {
                        Href = Url.Action(nameof(EnergyEfficiencyController.CavityWallsInsulated_Get), "EnergyEfficiency", new { reference = Model.PropertyData.Reference, entryPoint = QuestionFlowStep.CavityWallsInsulated }),
                        Text = SharedLocalizer["Change"].Value,
                        VisuallyHiddenText = SharedLocalizer["are your cavity walls insulated"].Value
                    }
                }
            }
        });
    }
    
    if (Model.PropertyData.WallConstruction is WallConstruction.Solid or WallConstruction.Mixed)
    {
        rows.Add(new()
        {
            Key = new() 
            {
                Classes = "govuk-!-width-one-quarter",
                Text = SharedLocalizer["Are your solid walls insulated?"].Value
            },
            Value = new()
            {
                Classes = "govuk-!-width-one-half",
                Text = GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.PropertyData.SolidWallsInsulated)
            },
            Actions = new()
            {
                Classes = "govuk-!-width-one-quarter",
                Items = new()
                {
                    new()
                    {
                        Href = Url.Action(nameof(EnergyEfficiencyController.SolidWallsInsulated_Get), "EnergyEfficiency", new {reference = Model.PropertyData.Reference, entryPoint = QuestionFlowStep.SolidWallsInsulated}),
                        Text = SharedLocalizer["Change"].Value,
                        VisuallyHiddenText = SharedLocalizer["are your solid walls insulated"].Value
                    }
                }
            }
        });
    }

    if (Model.PropertyData.PropertyType is not PropertyType.ApartmentFlatOrMaisonette || Model.PropertyData.FlatType is FlatType.GroundFloor)
    {
        rows.Add(new()
        {
            Key = new() 
            {
                Classes = "govuk-!-width-one-quarter",
                Text = SharedLocalizer["Floor construction"].Value
            },
            Value = new()
            {
                Classes = "govuk-!-width-one-half",
                Text = Model.PropertyData.FloorConstruction.DescriptionForAnswerSummary()
            },
            Actions = new()
            {
                Classes = "govuk-!-width-one-quarter",
                Items = new()
                {
                    new()
                    {
                        Href = Url.Action(nameof(EnergyEfficiencyController.FloorConstruction_Get), "EnergyEfficiency", new {reference = Model.PropertyData.Reference, entryPoint = QuestionFlowStep.FloorConstruction}),
                        Text = SharedLocalizer["Change"].Value,
                        VisuallyHiddenText = SharedLocalizer["floor construction"].Value
                    }
                }
            }
        });
        
        if (Model.PropertyData.FloorConstruction is not FloorConstruction.DoNotKnow and not FloorConstruction.Other)
        {
            rows.Add(new()
            {
                Key = new() 
                {
                    Classes = "govuk-!-width-one-quarter",
                    Text = SharedLocalizer["Is your ground floor insulated?"].Value
                },
                Value = new()
                {
                    Classes = "govuk-!-width-one-half",
                    Text = GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.PropertyData.FloorInsulated)
                },
                Actions = new()
                {
                    Classes = "govuk-!-width-one-quarter",
                    Items = new()
                    {
                        new()
                        {
                            Href = Url.Action(nameof(EnergyEfficiencyController.FloorInsulated_Get), "EnergyEfficiency", new {reference = Model.PropertyData.Reference, entryPoint = QuestionFlowStep.FloorInsulated}),
                            Text = SharedLocalizer["Change"].Value,
                            VisuallyHiddenText = SharedLocalizer["is your ground floor insulated"].Value
                        }
                    }
                }
            });
        }
    }
    
    @if (Model.PropertyData.PropertyType is not PropertyType.ApartmentFlatOrMaisonette || Model.PropertyData.FlatType is FlatType.TopFloor)
    {
        rows.Add(new()
        {
            Key = new() 
            {
                Classes = "govuk-!-width-one-quarter",
                Text = SharedLocalizer["Is any part of your roof flat?"].Value
            },
            Value = new()
            {
                Classes = "govuk-!-width-one-half",
                Text = GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.PropertyData.RoofConstruction)
            },
            Actions = new()
            {
                Classes = "govuk-!-width-one-quarter",
                Items = new()
                {
                    new()
                    {
                        Href = Url.Action(nameof(EnergyEfficiencyController.RoofConstruction_Get), "EnergyEfficiency", new {reference = Model.PropertyData.Reference, entryPoint = QuestionFlowStep.RoofConstruction}),
                        Text = SharedLocalizer["Change"].Value,
                        VisuallyHiddenText = SharedLocalizer["is any part of your roof flat"].Value
                    }
                }
            }
        });

        if (Model.PropertyData.RoofConstruction is not RoofConstruction.Flat)
        {
            rows.Add(new()
            {
                Key = new() 
                {
                    Classes = "govuk-!-width-one-quarter",
                    Text = SharedLocalizer["Do you have a loft that hasn't been converted into a room?"].Value
                },
                Value = new()
                {
                    Classes = "govuk-!-width-one-half",
                    Text = GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.PropertyData.LoftSpace)
                },
                Actions = new()
                {
                    Classes = "govuk-!-width-one-quarter",
                    Items = new()
                    {
                        new()
                        {
                            Href = Url.Action(nameof(EnergyEfficiencyController.LoftSpace_Get), "EnergyEfficiency", new {reference = Model.PropertyData.Reference, entryPoint = QuestionFlowStep.LoftSpace}),
                            Text = SharedLocalizer["Change"].Value,
                            VisuallyHiddenText = SharedLocalizer["do you have a loft that hasn't been converted into a room"].Value
                        }
                    }
                }
            });

            if (Model.PropertyData.LoftSpace is LoftSpace.Yes)
            {
                rows.Add(new()
                {
                    Key = new() 
                    {
                        Classes = "govuk-!-width-one-quarter",
                        Text = SharedLocalizer["Is there access to your loft?"].Value
                    },
                    Value = new()
                    {
                        Classes = "govuk-!-width-one-half",
                        Text = GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.PropertyData.LoftAccess)
                    },
                    Actions = new()
                    {
                        Classes = "govuk-!-width-one-quarter",
                        Items = new()
                        {
                            new()
                            {
                                Href = Url.Action(nameof(EnergyEfficiencyController.LoftAccess_Get), "EnergyEfficiency", new {reference = Model.PropertyData.Reference, entryPoint = QuestionFlowStep.LoftAccess}),
                                Text = SharedLocalizer["Change"].Value,
                                VisuallyHiddenText = SharedLocalizer["is there access to your loft"].Value
                            }
                        }
                    }
                });
                
                if (Model.PropertyData.LoftAccess is LoftAccess.Yes)
                {
                    rows.Add(new()
                    {
                        Key = new()
                        {
                            Classes = "govuk-!-width-one-quarter",
                            Text = SharedLocalizer["Is your loft fully insulated?"].Value
                        },
                        Value = new()
                        {
                            Classes = "govuk-!-width-one-half",
                            Text = GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.PropertyData.RoofInsulated)
                        },
                        Actions = new()
                        {
                            Classes = "govuk-!-width-one-quarter",
                            Items = new()
                            {
                                new()
                                {
                                    Href = Url.Action(nameof(EnergyEfficiencyController.RoofInsulated_Get), "EnergyEfficiency", new { reference = Model.PropertyData.Reference, entryPoint = QuestionFlowStep.RoofInsulated }),
                                    Text = SharedLocalizer["Change"].Value,
                                    VisuallyHiddenText = SharedLocalizer["is your loft fully insulated"].Value
                                }
                            }
                        }
                    });
                }
            }
        }
    }
    
    rows.Add(new()
    {
        Key = new() 
        {
            Classes = "govuk-!-width-one-quarter",
            Text = SharedLocalizer["Glazing type "].Value
        },
        Value = new()
        {
            Classes = "govuk-!-width-one-half",
            Text = GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.PropertyData.GlazingType)
        },
        Actions = new()
        {
            Classes = "govuk-!-width-one-quarter",
            Items = new()
            {
                new()
                {
                    Href = Url.Action(nameof(EnergyEfficiencyController.GlazingType_Get), "EnergyEfficiency", new {reference = Model.PropertyData.Reference, entryPoint = QuestionFlowStep.GlazingType}),
                    Text = SharedLocalizer["Change"].Value,
                    VisuallyHiddenText = SharedLocalizer["glazing type"].Value
                }
            }
        }
    });
    
    rows.Add(new()
    {
        Key = new() 
        {
            Classes = "govuk-!-width-one-quarter",
            Text = SharedLocalizer["Outdoor space for heat pump"].Value
        },
        Value = new()
        {
            Classes = "govuk-!-width-one-half",
            Text = GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.PropertyData.HasOutdoorSpace)
        },
        Actions = new()
        {
            Classes = "govuk-!-width-one-quarter",
            Items = new()
            {
                new()
                {
                    Href = Url.Action(nameof(EnergyEfficiencyController.OutdoorSpace_Get), "EnergyEfficiency", new {reference = Model.PropertyData.Reference, entryPoint = QuestionFlowStep.OutdoorSpace}),
                    Text = SharedLocalizer["Change"].Value,
                    VisuallyHiddenText = SharedLocalizer["outdoor space for heat pump"].Value
                }
            }
        }
    });
    
    rows.Add(new()
    {
        Key = new() 
        {
            Classes = "govuk-!-width-one-quarter",
            Text = SharedLocalizer["Heating system"].Value
        },
        Value = new()
        {
            Classes = "govuk-!-width-one-half",
            Text = Model.PropertyData.HeatingType == HeatingType.Other 
                ? $"{GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.PropertyData.HeatingType)} - {GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.PropertyData.OtherHeatingType)}" 
                : GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.PropertyData.HeatingType)
        },
        Actions = new()
        {
            Classes = "govuk-!-width-one-quarter",
            Items = new()
            {
                new()
                {
                    Href = Url.Action(nameof(EnergyEfficiencyController.HeatingType_Get), "EnergyEfficiency", new {reference = Model.PropertyData.Reference, entryPoint = QuestionFlowStep.HeatingType}),
                    Text = SharedLocalizer["Change"].Value,
                    VisuallyHiddenText = SharedLocalizer["heating system"].Value
                }
            }
        }
    });

    if (Model.PropertyData.HasHotWaterCylinder is not null)
    {
        rows.Add(new()
        {
            Key = new() 
            {
                Classes = "govuk-!-width-one-quarter",
                Text = SharedLocalizer["Hot water cylinder"].Value
            },
            Value = new()
            {
                Classes = "govuk-!-width-one-half",
                Text = GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.PropertyData.HasHotWaterCylinder)
            },
            Actions = new()
            {
                Classes = "govuk-!-width-one-quarter",
                Items = new()
                {
                    new()
                    {
                        Href = Url.Action(nameof(EnergyEfficiencyController.HotWaterCylinder_Get), "EnergyEfficiency", new {reference = Model.PropertyData.Reference, entryPoint = QuestionFlowStep.HotWaterCylinder}),
                        Text = SharedLocalizer["Change"].Value,
                        VisuallyHiddenText = SharedLocalizer["hot water cylinder"].Value
                    }
                }
            }
        });
    }

    rows.Add(new()
    {
        Key = new() 
        {
            Classes = "govuk-!-width-one-quarter",
            Text = SharedLocalizer["Size of household"].Value
        },
        Value = new()
        {
            Classes = "govuk-!-width-one-half",
            Text = Model.PropertyData.NumberOfOccupants?.ToString() ?? @SharedLocalizer["Question skipped"].Value
        },
        Actions = new()
        {
            Classes = "govuk-!-width-one-quarter",
            Items = new()
            {
                new()
                {
                    Href = Url.Action(nameof(EnergyEfficiencyController.NumberOfOccupants_Get), "EnergyEfficiency", new {reference = Model.PropertyData.Reference, entryPoint = QuestionFlowStep.NumberOfOccupants}),
                    Text = SharedLocalizer["Change"].Value,
                    VisuallyHiddenText = SharedLocalizer["size of household"].Value
                }
            }
        }
    });
    
    rows.Add(new()
    {
        Key = new() 
        {
            Classes = "govuk-!-width-one-quarter",
            Text = SharedLocalizer["Heating pattern"].Value
        },
        Value = new()
        {
            Classes = "govuk-!-width-one-half",
            Html = (@<text>
                        @{
                            if (Model.PropertyData.HeatingPattern is HeatingPattern.Other)
                            {
                                <span>
                                    @Model.PropertyData.HoursOfHeatingMorning.ToString() @SharedLocalizer["hours in the morning"]
                                    <br />
                                    @Model.PropertyData.HoursOfHeatingEvening.ToString() @SharedLocalizer["hours in the afternoon and evening"]
                                </span>
                            }
                            else
                            {
                                <span>
                                    @GovUkRadioCheckboxLabelTextAttribute.GetLabelText(Model.PropertyData.HeatingPattern)
                                </span>
                            }}
                     </text>)
        },
        Actions = new()
        {
            Classes = "govuk-!-width-one-quarter",
            Items = new()
            {
                new()
                {
                    Href = Url.Action(nameof(EnergyEfficiencyController.HeatingPattern_Get), "EnergyEfficiency", new {reference = Model.PropertyData.Reference, entryPoint = QuestionFlowStep.HeatingPattern}),
                    Text = SharedLocalizer["Change"].Value,
                    VisuallyHiddenText = SharedLocalizer["heating pattern"].Value
                }
            }
        }
    });

    rows.Add(new()
    {
        Key = new() 
        {
            Classes = "govuk-!-width-one-quarter",
            Text = SharedLocalizer["Temperature"].Value
        },
        Value = new()
        {
            Classes = "govuk-!-width-one-half",
            Text = Model.PropertyData.Temperature.HasValue ? Model.PropertyData.Temperature.Value + "°C" : SharedLocalizer["Question skipped"].Value
        },
        Actions = new()
        {
            Classes = "govuk-!-width-one-quarter",
            Items = new()
            {
                new()
                {
                    Href = Url.Action(nameof(EnergyEfficiencyController.Temperature_Get), "EnergyEfficiency", new {reference = Model.PropertyData.Reference, entryPoint = QuestionFlowStep.Temperature}),
                    Text = SharedLocalizer["Change"].Value,
                    VisuallyHiddenText = SharedLocalizer["temperature"].Value
                }
            }
        }
    });
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        @if (Model.PropertyData.HasSeenRecommendations is true)
        {
            @await Html.GovUkNotificationBanner(new NotificationBannerViewModel
                   {
                       TitleText = SharedLocalizer["Important"].Value,
                       Text = SharedLocalizer["Your saved recommendations will be reset if you change any of your answers"].Value
                   })
        }
        

        <h1 class="govuk-heading-l">
            @SharedLocalizer["Check your answers"]
        </h1>

        @await Html.GovUkHint(new HintViewModel
               {
                   Text = SharedLocalizer["Please review the information we have gathered. You can still change your answers if anything looks wrong."].Value
               })

        @(await Html.GovUkSummaryList(new SummaryListViewModel
        {
            Rows = rows
        }))

        <form action="@Url.Action(nameof(EnergyEfficiencyController.AnswerSummary_Post), "EnergyEfficiency", new { reference = Model.PropertyData.Reference })" method="post" novalidate>
            @Html.AntiForgeryToken()
            @await Html.GovUkButton(new ButtonViewModel
                   {
                       Html = @<text>
                                  See results
                                  <svg class="govuk-button__start-icon" xmlns="http://www.w3.org/2000/svg" width="17.5" height="19" viewBox="0 0 33 40" aria-hidden="true" focusable="false">
                                      <path fill="currentColor" d="M0 0h13l20 20-20 20H0l20-20z"/>
                                  </svg>
                               </text>,
                       Classes = "govuk-!-margin-top-2 govuk-!-margin-bottom-8 govuk-button--start"
                   })
        </form>
    </div>
    <div class="govuk-grid-column-one-third">
        @await Html.PartialAsync("/Views/EnergyEfficiency/Partials/_AdditionalSupport.cshtml")
    </div>
</div>